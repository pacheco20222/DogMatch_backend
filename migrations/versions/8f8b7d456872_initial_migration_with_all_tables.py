"""Initial migration with all tables

Revision ID: 8f8b7d456872
Revises: 
Create Date: 2025-10-21 17:08:52.411397

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '8f8b7d456872'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('totp_secret', sa.String(length=32), nullable=True),
    sa.Column('is_2fa_enabled', sa.Boolean(), nullable=False),
    sa.Column('backup_codes', sa.Text(), nullable=True),
    sa.Column('last_totp_used', sa.Integer(), nullable=True),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('user_type', sa.Enum('owner', 'shelter', 'admin', name='user_type_enum'), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('profile_photo_url', sa.String(length=500), nullable=True),
    sa.Column('profile_photo_filename', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('blacklisted_tokens',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('jti', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token_type', sa.Enum('access', 'refresh', name='token_type_enum'), nullable=False),
    sa.Column('blacklisted_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('blacklisted_tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_blacklisted_tokens_jti'), ['jti'], unique=True)

    op.create_table('dogs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('age_months', sa.Integer(), nullable=True),
    sa.Column('breed', sa.String(length=100), nullable=True),
    sa.Column('gender', sa.Enum('male', 'female', name='dog_gender_enum'), nullable=False),
    sa.Column('size', sa.Enum('small', 'medium', 'large', 'extra_large', name='dog_size_enum'), nullable=False),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('color', sa.String(length=50), nullable=True),
    sa.Column('personality', sa.Text(), nullable=True),
    sa.Column('energy_level', sa.Enum('low', 'moderate', 'high', 'very_high', name='energy_level_enum'), nullable=True),
    sa.Column('good_with_kids', sa.Boolean(), nullable=True),
    sa.Column('good_with_dogs', sa.Boolean(), nullable=True),
    sa.Column('good_with_cats', sa.Boolean(), nullable=True),
    sa.Column('is_vaccinated', sa.Boolean(), nullable=False),
    sa.Column('is_neutered', sa.Boolean(), nullable=True),
    sa.Column('health_notes', sa.Text(), nullable=True),
    sa.Column('special_needs', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('availability_type', sa.Enum('playdate', 'adoption', 'both', name='availability_type_enum'), nullable=False),
    sa.Column('adoption_fee', sa.Float(), nullable=True),
    sa.Column('is_adopted', sa.Boolean(), nullable=False),
    sa.Column('adopted_at', sa.DateTime(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('like_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_active', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('organizer_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.Enum('meetup', 'training', 'adoption', 'competition', 'social', 'educational', name='event_category_enum'), nullable=False),
    sa.Column('event_date', sa.DateTime(), nullable=False),
    sa.Column('duration_hours', sa.Float(), nullable=True),
    sa.Column('registration_deadline', sa.DateTime(), nullable=True),
    sa.Column('location', sa.String(length=300), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('state', sa.String(length=100), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('venue_details', sa.Text(), nullable=True),
    sa.Column('max_participants', sa.Integer(), nullable=True),
    sa.Column('current_participants', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('min_age_requirement', sa.Integer(), nullable=True),
    sa.Column('max_age_requirement', sa.Integer(), nullable=True),
    sa.Column('size_requirements', sa.Text(), nullable=True),
    sa.Column('breed_restrictions', sa.Text(), nullable=True),
    sa.Column('vaccination_required', sa.Boolean(), nullable=False),
    sa.Column('special_requirements', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('draft', 'published', 'cancelled', 'completed', name='event_status_enum'), nullable=False),
    sa.Column('is_recurring', sa.Boolean(), nullable=False),
    sa.Column('recurrence_pattern', sa.String(length=50), nullable=True),
    sa.Column('requires_approval', sa.Boolean(), nullable=False),
    sa.Column('image_url', sa.String(length=500), nullable=True),
    sa.Column('image_filename', sa.String(length=255), nullable=True),
    sa.Column('contact_email', sa.String(length=255), nullable=True),
    sa.Column('contact_phone', sa.String(length=20), nullable=True),
    sa.Column('additional_info', sa.Text(), nullable=True),
    sa.Column('rules_and_guidelines', sa.Text(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('interest_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['organizer_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_registrations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('dog_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'confirmed', 'rejected', 'cancelled', 'waitlisted', name='registration_status_enum'), nullable=False),
    sa.Column('registration_code', sa.String(length=20), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('special_requests', sa.Text(), nullable=True),
    sa.Column('payment_status', sa.Enum('pending', 'completed', 'failed', 'refunded', name='payment_status_enum'), nullable=False),
    sa.Column('payment_amount', sa.Float(), nullable=True),
    sa.Column('payment_method', sa.String(length=50), nullable=True),
    sa.Column('payment_reference', sa.String(length=100), nullable=True),
    sa.Column('payment_date', sa.DateTime(), nullable=True),
    sa.Column('discount_code', sa.String(length=50), nullable=True),
    sa.Column('discount_amount', sa.Float(), nullable=False),
    sa.Column('discount_percentage', sa.Float(), nullable=False),
    sa.Column('checked_in', sa.Boolean(), nullable=False),
    sa.Column('check_in_time', sa.DateTime(), nullable=True),
    sa.Column('checked_out', sa.Boolean(), nullable=False),
    sa.Column('check_out_time', sa.DateTime(), nullable=True),
    sa.Column('attended', sa.Boolean(), nullable=False),
    sa.Column('approved_by_user_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('emergency_contact_name', sa.String(length=100), nullable=True),
    sa.Column('emergency_contact_phone', sa.String(length=20), nullable=True),
    sa.Column('registered_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['dog_id'], ['dogs.id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event_id', 'user_id', name='unique_user_event_registration'),
    sa.UniqueConstraint('registration_code')
    )
    op.create_table('matches',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('dog_one_id', sa.Integer(), nullable=False),
    sa.Column('dog_two_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'matched', 'declined', 'expired', name='match_status_enum'), nullable=False),
    sa.Column('initiated_by_dog_id', sa.Integer(), nullable=False),
    sa.Column('dog_one_action', sa.Enum('like', 'pass', 'super_like', 'pending', name='swipe_action_enum'), nullable=False),
    sa.Column('dog_two_action', sa.Enum('like', 'pass', 'super_like', 'pending', name='swipe_action_enum'), nullable=False),
    sa.Column('match_type', sa.Enum('playdate', 'adoption', 'general', name='match_type_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('matched_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_message_at', sa.DateTime(), nullable=True),
    sa.Column('message_count', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('archived_by_user_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('dog_one_id != dog_two_id', name='no_self_match'),
    sa.CheckConstraint('dog_one_id < dog_two_id', name='ordered_match_pair'),
    sa.ForeignKeyConstraint(['archived_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['dog_one_id'], ['dogs.id'], ),
    sa.ForeignKeyConstraint(['dog_two_id'], ['dogs.id'], ),
    sa.ForeignKeyConstraint(['initiated_by_dog_id'], ['dogs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('dog_one_id', 'dog_two_id', name='unique_match_pair')
    )
    op.create_table('photos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('dog_id', sa.Integer(), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=True),
    sa.Column('s3_key', sa.String(length=500), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('content_type', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['dog_id'], ['dogs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('messages',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=False),
    sa.Column('sender_user_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('message_type', sa.Enum('text', 'image', 'location', 'system', name='message_type_enum'), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('is_edited', sa.Boolean(), nullable=False),
    sa.Column('edited_at', sa.DateTime(), nullable=True),
    sa.Column('image_url', sa.String(length=500), nullable=True),
    sa.Column('image_filename', sa.String(length=255), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('location_name', sa.String(length=200), nullable=True),
    sa.Column('system_data', sa.Text(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=False),
    sa.Column('delivered_at', sa.DateTime(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_by_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['deleted_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.ForeignKeyConstraint(['sender_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('messages')
    op.drop_table('photos')
    op.drop_table('matches')
    op.drop_table('event_registrations')
    op.drop_table('events')
    op.drop_table('dogs')
    with op.batch_alter_table('blacklisted_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blacklisted_tokens_jti'))

    op.drop_table('blacklisted_tokens')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###
